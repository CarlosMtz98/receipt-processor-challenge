// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/receipt/repository/receipt_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "receipt-processor-challenge/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockReceiptRepository is a mock of ReceiptRepository interface.
type MockReceiptRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceiptRepositoryMockRecorder
}

// MockReceiptRepositoryMockRecorder is the mock recorder for MockReceiptRepository.
type MockReceiptRepositoryMockRecorder struct {
	mock *MockReceiptRepository
}

// NewMockReceiptRepository creates a new mock instance.
func NewMockReceiptRepository(ctrl *gomock.Controller) *MockReceiptRepository {
	mock := &MockReceiptRepository{ctrl: ctrl}
	mock.recorder = &MockReceiptRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiptRepository) EXPECT() *MockReceiptRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReceiptRepository) Create(ctx context.Context, receipt *models.Receipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, receipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReceiptRepositoryMockRecorder) Create(ctx, receipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReceiptRepository)(nil).Create), ctx, receipt)
}

// GetByID mocks base method.
func (m *MockReceiptRepository) GetByID(ctx context.Context, id uuid.UUID) (*models.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockReceiptRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockReceiptRepository)(nil).GetByID), ctx, id)
}
